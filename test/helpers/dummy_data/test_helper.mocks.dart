// Mocks generated by Mockito 5.4.0 from annotations
// in anime_store/test/helpers/dummy_data/test_helper.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i6;

import 'package:anime_store/features/anime/data/data_sources/remote/anime_remote_service.dart'
    as _i5;
import 'package:anime_store/features/anime/data/models/anime_character_response_model.dart'
    as _i9;
import 'package:anime_store/features/anime/data/models/anime_response_model.dart'
    as _i7;
import 'package:anime_store/features/anime/domain/entities/anime_character_response.dart'
    as _i12;
import 'package:anime_store/features/anime/domain/entities/anime_response.dart'
    as _i11;
import 'package:anime_store/features/anime/domain/repositories/anime_repository.dart'
    as _i10;
import 'package:anime_store/features/anime/domain/use_cases/get_anime_characters.dart'
    as _i13;
import 'package:anime_store/features/anime/domain/use_cases/get_anime_list.dart'
    as _i8;
import 'package:anime_store/stack/common/models/failure.dart' as _i1;
import 'package:anime_store/stack/common/models/result.dart' as _i3;
import 'package:anime_store/stack/core/logging/logger.dart' as _i4;
import 'package:mockito/mockito.dart' as _i2;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeResult_0<TValue extends Object, TError extends _i1.Failure>
    extends _i2.SmartFake implements _i3.Result<TValue, TError> {
  _FakeResult_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeLogger_1 extends _i2.SmartFake implements _i4.Logger {
  _FakeLogger_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [AnimeRemoteService].
///
/// See the documentation for Mockito's code generation for more information.
class MockAnimeRemoteService extends _i2.Mock
    implements _i5.AnimeRemoteService {
  MockAnimeRemoteService() {
    _i2.throwOnMissingStub(this);
  }

  @override
  _i6.Future<_i3.Result<_i7.AnimeResponseModel, _i1.Failure>> getAnimeList(
          _i8.GetAnimeListParams? params) =>
      (super.noSuchMethod(
        Invocation.method(
          #getAnimeList,
          [params],
        ),
        returnValue:
            _i6.Future<_i3.Result<_i7.AnimeResponseModel, _i1.Failure>>.value(
                _FakeResult_0<_i7.AnimeResponseModel, _i1.Failure>(
          this,
          Invocation.method(
            #getAnimeList,
            [params],
          ),
        )),
      ) as _i6.Future<_i3.Result<_i7.AnimeResponseModel, _i1.Failure>>);

  @override
  _i6.Future<_i3.Result<List<_i9.AnimeCharacterResponseModel>, _i1.Failure>>
      getAnimeCharacters(int? animeId) => (super.noSuchMethod(
            Invocation.method(
              #getAnimeCharacters,
              [animeId],
            ),
            returnValue: _i6.Future<
                _i3.Result<List<_i9.AnimeCharacterResponseModel>,
                    _i1.Failure>>.value(_FakeResult_0<
                List<_i9.AnimeCharacterResponseModel>, _i1.Failure>(
              this,
              Invocation.method(
                #getAnimeCharacters,
                [animeId],
              ),
            )),
          ) as _i6.Future<
              _i3.Result<List<_i9.AnimeCharacterResponseModel>, _i1.Failure>>);
}

/// A class which mocks [AnimeRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockAnimeRepository extends _i2.Mock implements _i10.AnimeRepository {
  MockAnimeRepository() {
    _i2.throwOnMissingStub(this);
  }

  @override
  _i6.Future<_i3.Result<_i11.AnimeResponse, _i1.Failure>> getAnimeList(
          _i8.GetAnimeListParams? params) =>
      (super.noSuchMethod(
        Invocation.method(
          #getAnimeList,
          [params],
        ),
        returnValue:
            _i6.Future<_i3.Result<_i11.AnimeResponse, _i1.Failure>>.value(
                _FakeResult_0<_i11.AnimeResponse, _i1.Failure>(
          this,
          Invocation.method(
            #getAnimeList,
            [params],
          ),
        )),
      ) as _i6.Future<_i3.Result<_i11.AnimeResponse, _i1.Failure>>);

  @override
  _i6.Future<_i3.Result<List<_i12.AnimeCharacterResponse>, _i1.Failure>>
      getAnimeCharacters(int? animeId) => (super.noSuchMethod(
            Invocation.method(
              #getAnimeCharacters,
              [animeId],
            ),
            returnValue: _i6.Future<
                    _i3.Result<List<_i12.AnimeCharacterResponse>,
                        _i1.Failure>>.value(
                _FakeResult_0<List<_i12.AnimeCharacterResponse>, _i1.Failure>(
              this,
              Invocation.method(
                #getAnimeCharacters,
                [animeId],
              ),
            )),
          ) as _i6.Future<
              _i3.Result<List<_i12.AnimeCharacterResponse>, _i1.Failure>>);
}

/// A class which mocks [GetAnimeList].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetAnimeList extends _i2.Mock implements _i8.GetAnimeList {
  MockGetAnimeList() {
    _i2.throwOnMissingStub(this);
  }

  @override
  _i4.Logger get logger => (super.noSuchMethod(
        Invocation.getter(#logger),
        returnValue: _FakeLogger_1(
          this,
          Invocation.getter(#logger),
        ),
      ) as _i4.Logger);

  @override
  _i6.Stream<void> get onEvent => (super.noSuchMethod(
        Invocation.getter(#onEvent),
        returnValue: _i6.Stream<void>.empty(),
      ) as _i6.Stream<void>);

  @override
  _i6.Future<_i3.Result<_i11.AnimeResponse, _i1.Failure>> call(
          {_i8.GetAnimeListParams? params}) =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [],
          {#params: params},
        ),
        returnValue:
            _i6.Future<_i3.Result<_i11.AnimeResponse, _i1.Failure>>.value(
                _FakeResult_0<_i11.AnimeResponse, _i1.Failure>(
          this,
          Invocation.method(
            #call,
            [],
            {#params: params},
          ),
        )),
      ) as _i6.Future<_i3.Result<_i11.AnimeResponse, _i1.Failure>>);

  @override
  void publish(dynamic event) => super.noSuchMethod(
        Invocation.method(
          #publish,
          [event],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i6.Future<void> stop() => (super.noSuchMethod(
        Invocation.method(
          #stop,
          [],
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);
}

/// A class which mocks [GetAnimeCharacters].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetAnimeCharacters extends _i2.Mock
    implements _i13.GetAnimeCharacters {
  MockGetAnimeCharacters() {
    _i2.throwOnMissingStub(this);
  }

  @override
  _i4.Logger get logger => (super.noSuchMethod(
        Invocation.getter(#logger),
        returnValue: _FakeLogger_1(
          this,
          Invocation.getter(#logger),
        ),
      ) as _i4.Logger);

  @override
  _i6.Stream<void> get onEvent => (super.noSuchMethod(
        Invocation.getter(#onEvent),
        returnValue: _i6.Stream<void>.empty(),
      ) as _i6.Stream<void>);

  @override
  _i6.Future<_i3.Result<List<_i12.AnimeCharacterResponse>, _i1.Failure>> call(
          {int? params}) =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [],
          {#params: params},
        ),
        returnValue: _i6.Future<
                _i3
                .Result<List<_i12.AnimeCharacterResponse>, _i1.Failure>>.value(
            _FakeResult_0<List<_i12.AnimeCharacterResponse>, _i1.Failure>(
          this,
          Invocation.method(
            #call,
            [],
            {#params: params},
          ),
        )),
      ) as _i6
          .Future<_i3.Result<List<_i12.AnimeCharacterResponse>, _i1.Failure>>);

  @override
  void publish(dynamic event) => super.noSuchMethod(
        Invocation.method(
          #publish,
          [event],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i6.Future<void> stop() => (super.noSuchMethod(
        Invocation.method(
          #stop,
          [],
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);
}
